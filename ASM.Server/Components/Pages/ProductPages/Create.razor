@page "/products/create"
@using Microsoft.EntityFrameworkCore
@using ASM.Share.Models
@inject IDbContextFactory<ASM.Share.Models.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Product</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Product" OnValidSubmit="AddProduct" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="productname" class="form-label">ProductName:</label> 
                <InputText id="productname" @bind-Value="Product.ProductName" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Product.ProductName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="unitprice" class="form-label">UnitPrice:</label> 
                <InputNumber id="unitprice" @bind-Value="Product.UnitPrice" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Product.UnitPrice" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:</label> 
                <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Product.Quantity" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="imageFile" class="form-label">Upload Image:</label>
                <InputFile id="imageFile" OnChange="OnFileSelected" accept="image/*" />
            </div>
            <div class="mb-3">
                <label for="categoryid" class="form-label">Category:</label>
                <InputSelect id="categoryid" @bind-Value="Product.CategoryId" class="form-control">
                    <option value="">-- Select Category --</option>
                    @foreach (var category in categoriesList)
                    {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Product.CategoryId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Product Product { get; set; } = new();
    private IBrowserFile? selectedFile; // Store the uploaded file

    private List<Category> categoriesList = new();

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
        categoriesList = await dbContext.Categories.ToListAsync();
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        Console.WriteLine($"File selected: {selectedFile?.Name}");
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddProduct()
    {
        if (selectedFile == null)
        {
            Console.WriteLine("No file selected.");
            return;  // Don't proceed if no file is selected
        }
        // Convert file to byte array
        var maxSize = 10 * 1024 * 1024; // 10MB
        using var memoryStream = new MemoryStream();
        await selectedFile.OpenReadStream(maxSize).CopyToAsync(memoryStream);
        var fileBytes = memoryStream.ToArray();

        // Prepare FormData
        var formData = new MultipartFormDataContent
        {
            { new StringContent(Product.ProductName), "ProductName" },
            { new StringContent(Product.UnitPrice.ToString()), "UnitPrice" },
            { new StringContent(Product.Quantity.ToString()), "Quantity" },
            { new StringContent(Product.CategoryId.ToString()), "CategoryId" },
            { new ByteArrayContent(fileBytes), "imageFile", selectedFile.Name }
        };

        // Send to API
        var httpClient = new HttpClient();
        var response = await httpClient.PostAsync("https://localhost:7058/api/products", formData);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/products");
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error uploading product. Status code: {response.StatusCode}, Response: {errorContent}");
        }
    }
}
