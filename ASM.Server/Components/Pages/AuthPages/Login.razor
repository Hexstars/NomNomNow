@page "/login"
@using ASM.Share.Models.Requests
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject ASM.Share.Models.Services.IAccountSvc _accountSvc
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3>ĐĂNG NHẬP</h3>
            </div>

            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.Email" />
            </div>

            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" type="password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>

            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>

            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginRequest Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var account = await _accountSvc.Login(Model);

        if (account == null)
        {
            errorMessage = "Invalid email or password";
            return;
        }
        else
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, Model.Email),
                new Claim(ClaimTypes.Role, account.Role.ToString())
            };
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await HttpContext.SignInAsync(principal);
            
			NavigationManager.NavigateTo("/");
        }
    }
}
