@page "/cart"
@using ASM.Share.Models.Requests
@inject NavigationManager NavigationManager
@inject IConfiguration config
@inject IJSRuntime JSRuntime
@inject HttpClient _http

<PageTitle>Giỏ hàng</PageTitle>

<h2 class="mb-4">Giỏ hàng của bạn</h2>

@if (cartItems.Any())
{
    <div class="table-responsive">
        <table class="table align-middle">
            <thead>
                <tr>
                    <th class="text-center">Hình ảnh</th>
                    <th>Sản phẩm</th>
                    <th class="text-end">Đơn giá</th>
                    <th class="text-center">Số lượng</th>
                    <th class="text-end">Thành tiền</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr>
                        <td class="text-center">
                            <img src="@($"https://localhost:7058/images/Products/{item.Image}")"
                                 width="60"
                                 class="img-thumbnail" />
                        </td>
                        <td>@item.ProductName</td>
                        <td class="text-end">@item.UnitPrice.ToString("N0") ₫</td>
                        <td class="text-center">
                            <div class="input-group input-group-sm mx-auto" style="max-width: 120px;">
                                <button class="btn btn-outline-secondary"
                                        @onclick="(() => UpdateQuantity(item.ProductId, item.Quantity - 1))"
                                        disabled="@(item.Quantity <= 1)">
                                    -
                                </button>
                                <input type="number"
                                       class="form-control text-center"
                                       value="@item.Quantity"
                                       min="1"
                                       max="10"
                                       oninput="@((ChangeEventArgs e) => HandleInput(item, e))" />
                                <button class="btn btn-outline-secondary"
                                        @onclick="(() => UpdateQuantity(item.ProductId, item.Quantity + 1))"
                                        disabled="@(item.Quantity >= 10)">
                                    +
                                </button>
                            </div>
                        </td>
                        <td class="text-end fw-bold">@((item.UnitPrice * item.Quantity).ToString("N0", new System.Globalization.CultureInfo("vi-VN"))) ₫</td>
                        <td class="text-end">
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-danger" @onclick="(() => RemoveFromCart(item.ProductId))">Xóa</button>
                                <button class="btn btn-sm btn-outline-primary" @onclick="(() => ViewDetails(item.ProductId))">Chi tiết</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="4" class="text-end fw-bold">Tổng cộng:</td>
                    <td class="text-end fw-bold text-danger">@grandTotal.ToString("N0") ₫</td>
                    <td></td>
                </tr>
                <tr>
                    <td colspan="5" class="text-end">
                        <button class="btn btn-primary btn-lg" @onclick="CreateOrder">Tiến hành đặt hàng <i class="bi bi-arrow-right ms-1"></i></button>
                    </td>
                    <td></td>
                </tr>
            </tfoot>
        </table>
    </div>
}
else
{
    <div class="alert alert-info text-center py-4">
        <h4>Giỏ hàng đang trống</h4>
        <a href="/" class="btn btn-outline-primary mt-2">Tiếp tục mua sắm</a>
    </div>
}

@code {
    private List<CartProduct> cartItems = new();
    private decimal grandTotal => cartItems.Sum(item => item.UnitPrice * item.Quantity);
    private string apiUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        apiUrl = config.GetSection("API")["APIUrl"] ?? string.Empty;
        await LoadCart();
    }

    private async Task<HttpRequestMessage> CreateAuthRequest(HttpMethod method, string url)
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        var request = new HttpRequestMessage(method, url);

        if (!string.IsNullOrWhiteSpace(token))
        {
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }

        return request;
    }

    private async Task LoadCart()
    {
        var request = await CreateAuthRequest(HttpMethod.Get, $"{apiUrl}carts");
        var response = await _http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            cartItems = await response.Content.ReadFromJsonAsync<List<CartProduct>>() ?? new();
        }
    }

    private async Task UpdateQuantity(int productId, int newQuantity)
    {
        newQuantity = Math.Clamp(newQuantity, 1, 10);

        var request = await CreateAuthRequest(HttpMethod.Put, $"{apiUrl}carts/update-quantity");

        request.Content = JsonContent.Create(new AddToCartRequest
        {
            ProductId = productId,
            Quantity = newQuantity
        });

        var response = await _http.SendAsync(request);

        // ✅ Luôn reload lại cart sau khi update để đồng bộ dữ liệu
        await LoadCart();
    }

    private void HandleInput(CartProduct item, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            item.Quantity = Math.Clamp(value, 1, 10);
        }
        else
        {
            item.Quantity = 1; // hoặc giữ nguyên giá trị cũ
        }
    }

    private async Task RemoveFromCart(int productId)
    {
        var request = await CreateAuthRequest(HttpMethod.Delete, $"{apiUrl}carts/{productId}");
        var response = await _http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            await LoadCart();
        }
    }

    private void ViewDetails(int productId)
    {
        NavigationManager.NavigateTo($"/product-details/{productId}");
    }

    private void CreateOrder()
    {
        NavigationManager.NavigateTo("/confirm-order");
    }
}
