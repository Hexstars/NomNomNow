@page "/confirm-order"
@using ASM.Share.Models
@using ASM.Share.Models.Requests
@using ASM.Share.Models.Responses
@using System.Text.Json
@inject HttpClient Http
@inject IConfiguration config
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<PageTitle>Xác nhận đơn hàng</PageTitle>

<h2 class="mb-4">Xác nhận đơn hàng</h2>

@if (isLoading)
{
    <p>Đang tải dữ liệu...</p>
}
else if (Account == null || CartItems == null || !CartItems.Any())
{
    <div class="alert alert-warning text-center py-4">
        <h4>Không có thông tin đơn hàng để xác nhận.</h4>
        <a href="/cart" class="btn btn-outline-secondary mt-2">Quay lại giỏ hàng</a>
    </div>
}
else
{
    <div class="card mb-4">
        <div class="card-header">Thông tin người nhận</div>
        <div class="card-body">
            <p><strong>Họ và tên:</strong> @Account.FullName</p>
            <p><strong>Số điện thoại:</strong> @Account.Phone</p>
            <p><strong>Địa chỉ:</strong> @Account.Address</p>
        </div>
    </div>

    <div class="card">
        <div class="card-header">Chi tiết đơn hàng</div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table align-middle">
                    <thead>
                        <tr>
                            <th class="text-center">Hình ảnh</th>
                            <th>Sản phẩm</th>
                            <th class="text-end">Đơn giá</th>
                            <th class="text-center">Số lượng</th>
                            <th class="text-end">Thành tiền</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in CartItems)
                        {
                            <tr>
                                <td class="text-center">
                                    <img src="@($"https://localhost:7058/images/Products/{item.Image}")"
                                         alt="@item.ProductName" width="60" class="img-thumbnail" />
                                </td>
                                <td>@item.ProductName</td>
                                <td class="text-end">@item.UnitPrice.ToString("N0") ₫</td>
                                <td class="text-center">@item.Quantity</td>
                                <td class="text-end">@item.Total.ToString("N0") ₫</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="4" class="text-end fw-bold">Tổng cộng:</td>
                            <td class="text-end fw-bold text-danger">@TotalAmount.ToString("N0") ₫</td>
                        </tr>
                    </tfoot>
                </table>
            </div>

            <div class="d-flex justify-content-end mt-3">
                <button @onclick="NavigateToCart" class="btn btn-secondary me-2">
                    <i class="bi bi-arrow-left me-1"></i> Trở về giỏ hàng
                </button>
                <button @onclick="SubmitOrder" class="btn btn-primary">
                    Thanh toán bằng VNPay <i class="bi bi-credit-card ms-1"></i>
                </button>
            </div>
        </div>
    </div>
}

@code {
    private Account? Account;
    private List<Share.Models.CartProduct>? CartItems;
    private bool isLoading = true;
    private string apiUrl = string.Empty;

    private PaymentInformationModel paymentModel = new();

    private decimal TotalAmount => CartItems?.Sum(item => item.Total) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            apiUrl = config["API:APIUrl"] ?? string.Empty;

            var request = await CreateAuthRequest(HttpMethod.Get, $"{apiUrl}orders/getdetails");
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Share.Models.Responses.ConfirmOrder>();
                if (result != null)
                {
                    Account = result.Account;
                    CartItems = result.CartProducts;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi tải thông tin đơn hàng: " + ex.Message);
        }

        isLoading = false;
    }

    private async Task<HttpRequestMessage> CreateAuthRequest(HttpMethod method, string url)
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        var request = new HttpRequestMessage(method, url);

        if (!string.IsNullOrWhiteSpace(token))
        {
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }

        return request;
    }
    private void NavigateToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }
    private async Task SubmitOrder()
    {
        paymentModel = new PaymentInformationModel
            {
                OrderType = "order",
                Amount = (double)TotalAmount,
                OrderDescription = $"Thanh toán đơn hàng của {Account?.FullName} tại NomNomNow",
				Name = Account.FullName,
            };

        var request = await CreateAuthRequest(HttpMethod.Post, $"{apiUrl}payment/CreatePaymentUrlVnpay");
        request.Content = JsonContent.Create(paymentModel);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<JsonElement>();
            var redirectUrl = result.GetProperty("redirectUrl").GetString();

            if (!string.IsNullOrEmpty(redirectUrl))
            {
                NavigationManager.NavigateTo(redirectUrl, true); // redirect phía client
            }
        }
        else
        {
            Console.WriteLine("Gửi yêu cầu thanh toán thất bại");
        }
    }
}
