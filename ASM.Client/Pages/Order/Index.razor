@page "/orders"
@using ASM.Share.Models
@using ASM.Share.Models.Responses
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IConfiguration Config
@inject NavigationManager NavigationManager
<PageTitle>Đơn hàng của bạn</PageTitle>

<h2 class="mb-4">Đơn hàng của bạn</h2>

@if (isLoading)
{
    <p class="text-center">Đang tải danh sách đơn hàng...</p>
}
else if (orders == null || !orders.Any())
{
    <div class="alert alert-info text-center py-4">
        <h4>Chưa có đơn hàng nào</h4>
        <a href="/" class="btn btn-outline-primary mt-2">Tiếp tục mua sắm</a>
    </div>
}
else
{
    @foreach (var order in orders)
    {
        <div class="card mb-4">
            <div class="card-header">
                Đơn hàng #@order.OrderId - Đặt ngày @order.OrderDate.ToString("dd/MM/yyyy HH:mm")
                @if (order.Status == OrderStatus.Cancelled)
                {
                    <span class="badge bg-danger ms-2">Đã hủy</span>
                }
                else
                {
                    <span class="badge bg-info ms-2">@GetOrderStatusName(order.Status)</span>
                }
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm align-middle">
                        <thead>
                            <tr>
                                <th class="text-center">Hình ảnh</th>
                                <th>Sản phẩm</th>
                                <th class="text-end">Đơn giá</th>
                                <th class="text-center">Số lượng</th>
                                <th class="text-end">Thành tiền</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in order.Products)
                            {
                                <tr>
                                    <td class="text-center">
                                        <img src="https://localhost:7058/images/Products/@product.Image"
                                             alt="@product.ProductName" width="60" class="img-thumbnail" />
                                    </td>
                                    <td>@product.ProductName</td>
                                    <td class="text-end">@product.UnitPrice.ToString("N0") ₫</td>
                                    <td class="text-center">@product.Quantity</td>
                                    <td class="text-end">@product.SubTotal.ToString("N0") ₫</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="4" class="text-end fw-bold">Tổng cộng:</td>
                                <td class="text-end fw-bold">@order.Total.ToString("N0") ₫</td>
                            </tr>
                            <tr>
                                <td colspan="5" class="text-end">
                                    <small class="text-muted">Địa chỉ giao hàng: @order.Address</small><br>
                                    <small class="text-muted">Số điện thoại: @order.Phone</small>
                                    @if (order.Status != OrderStatus.Cancelled)
                                    {
                                        <button @onclick="() => CancelOrder(order.OrderId)" class="btn btn-sm btn-outline-danger ms-2">Hủy đơn hàng</button>
                                    }
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<OrderView>? orders;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        try
        {
            var apiUrl = Config["API:APIUrl"];
            var request = await CreateAuthRequest(HttpMethod.Get, $"{apiUrl}orders/GetOrders");
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                orders = await response.Content.ReadFromJsonAsync<List<OrderView>>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Vui lòng đăng nhập để xem đơn hàng");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không thể tải danh sách đơn hàng");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Lỗi khi tải đơn hàng: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    private string GetOrderStatusName(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "Chờ xử lý",
            OrderStatus.InProgress => "Đang giao hàng",
            OrderStatus.Completed => "Đã giao hàng",
            OrderStatus.Cancelled => "Đã hủy",
            _ => status.ToString() // Fallback
        };
    }
    private async Task CancelOrder(int orderId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn hủy đơn hàng này?"))
        {
            return;
        }

        try
        {
            var apiUrl = Config["API:APIUrl"];
            var request = await CreateAuthRequest(HttpMethod.Post, $"{apiUrl}orders/CancelOrder/{orderId}");
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Hủy đơn hàng thành công");
                await LoadOrders(); // Refresh the order list
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không thể hủy đơn hàng");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Lỗi khi hủy đơn hàng: {ex.Message}");
        }
    }

    private async Task<HttpRequestMessage> CreateAuthRequest(HttpMethod method, string url)
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        var request = new HttpRequestMessage(method, url);

        if (!string.IsNullOrWhiteSpace(token))
        {
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }

        return request;
    }
}