@page "/login"
@using ASM.Share.Models.Requests
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IJSRuntime JSRuntime
@inject Microsoft.Extensions.Configuration.IConfiguration config

<PageTitle>Đăng Nhập</PageTitle>
<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6">
            <h2 class="text-center">ĐĂNG NHẬP</h2>

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" type="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Nhập email" />
                    <ValidationMessage For="() => loginModel.Email" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Mật khẩu</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Nhập mật khẩu" />
                    <ValidationMessage For="() => loginModel.Password" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary w-100" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Đang đăng nhập...</span>
                    }
                    else
                    {
                        <span>Đăng nhập</span>
                    }
                </button>

                <div class="mt-3 text-center">
                    <p>Chưa có tài khoản? <NavLink href="/register">Đăng ký tại đây</NavLink></p>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginModel = new();
    private bool isSubmitting = false;
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var apiUrl = config.GetSection("API")["APIUrl"].ToString();
            isSubmitting = true;
            errorMessage = null;

            // Send the login data to the API
            var response = await Http.PostAsJsonAsync(apiUrl + "token/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                // Parse the response to get the JWT token
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.Token))
                {
                    // Store the token and email in local storage

                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", loginResponse.Token);
                    // Redirect to the homepage
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    errorMessage = "Đăng nhập thất bại: Không nhận được token.";
                }
            }
            else
            {
                // Handle error response from the API
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = string.IsNullOrEmpty(errorContent) ? "Đăng nhập thất bại. Vui lòng thử lại." : errorContent;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    // Class to deserialize the API response
    private class LoginResponse
    {
        public string Token { get; set; }
    }
}