@page "/"
@using ASM.Share.Models.Requests
@using ASM.Share.Models.Responses
@inject HttpClient Http
@inject Microsoft.Extensions.Configuration.IConfiguration Config
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Trang chủ</PageTitle>

<style>
    .category-card, .product-card {
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .category-card:hover, .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .category-card img, .product-card img {
        max-height: 180px;
        object-fit: contain;
    }
</style>

<div class="homepage-content">
    <section class="py-5">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="h3">DANH MỤC</h2>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Đang tải danh mục...</p>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-danger">@errorMessage</p>
                    }
                    else if (categories == null || !categories.Any())
                    {
                        <p>Không có danh mục nào để hiển thị.</p>
                    }
                    else
                    {
                        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
                            @foreach (var category in categories)
                            {
                                <div class="col">
                                    <div class="card h-100 border-0 category-card">
                                        <div class="d-flex justify-content-center align-items-center bg-light" style="height: 180px;">
                                            <img src="@($"https://localhost:7058/images/Categories/{category.Image}")"
                                                 class="img-fluid p-2"
                                                 alt="@category.CategoryName" />
                                        </div>
                                        <div class="card-body text-center">
                                            <h6 class="card-title mb-1">@category.CategoryName</h6>
                                            <a href="/morefromcategory/@category.CategoryId"
                                               class="btn btn-sm btn-outline-primary"
                                            @onclick:stopPropagation>Xem tất cả</a>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>

    <section class="pb-5">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="h3">SẢN PHẨM</h2>
                    </div>
                </div>
            </div>
            <div class="row">
                @if (isLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p>Đang tải sản phẩm...</p>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                }
                else if (products == null || !products.Any())
                {
                    <p>Không có sản phẩm nào để hiển thị.</p>
                }
                else
                {
                    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
                        @foreach (var product in PagedProducts)
                        {
                            <div class="col">
                                <div class="card h-100 border-0 product-card" @onclick="() => ViewProductDetails(product.ProductId)">
                                    <div class="d-flex justify-content-center align-items-center bg-light" style="height: 180px;">
                                        <img src="@($"https://localhost:7058/images/Products/{product.Image}")"
                                             class="img-fluid p-2"
                                             alt="@product.ProductName" />
                                    </div>
                                    <div class="card-body text-center">
                                        <h6 class="card-title mb-1">@product.ProductName</h6>
                                        <p class="text-muted mb-2">@product.UnitPrice.ToString("N0") ₫</p>
                                        <a href="/product-details/@product.ProductId"
                                           class="btn btn-sm btn-outline-primary"
                                           @onclick:stopPropagation>Xem chi tiết</a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    @if (TotalPages > 1)
                    {
                        <nav class="mt-4">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(1)">«</button>
                                </li>

                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">‹</button>
                                </li>

                                @if (GetVisiblePageNumbers().First() > 1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }

                                @foreach (var pageNumber in GetVisiblePageNumbers())
                                {
                                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }

                                @if (GetVisiblePageNumbers().Last() < TotalPages)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }

                                <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">›</button>
                                </li>

                                <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(TotalPages)">»</button>
                                </li>
                            </ul>
                        </nav>
                    }
                }
            </div>
        </div>
    </section>
</div>

@code {
    private List<Category>? categories;
    private List<Product>? products;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadHomeData();
    }
    private int currentPage = 1;
    private int pageSize = 4;

    private IEnumerable<Product> PagedProducts =>
        products?.Skip((currentPage - 1) * pageSize).Take(pageSize) ?? Enumerable.Empty<Product>();

    private int TotalPages => products == null ? 0 : (int)Math.Ceiling((double)products.Count / pageSize);

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
        }
    }

    private List<int> GetVisiblePageNumbers()
    {
        var pages = new List<int>();
        const int maxVisible = 5; // number of pages around current to show

        int start = Math.Max(1, currentPage - 2);
        int end = Math.Min(TotalPages, currentPage + 2);

        for (int i = start; i <= end; i++)
        {
            pages.Add(i);
        }

        return pages;
    }

    private async Task LoadHomeData()
    {
        try
        {
            var apiUrl = Config["API:APIUrl"] ?? throw new InvalidOperationException("API URL is not configured");
            var request = await CreateAuthRequest(HttpMethod.Get, $"{apiUrl}Home");
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var homeData = await response.Content.ReadFromJsonAsync<HomePage>();
                if (homeData != null)
                {
                    products = homeData.Products;
                    categories = homeData.Categories;
                }
                else
                {
                    errorMessage = "Không có dữ liệu trả về từ API.";
                }
            }
            else
            {
                errorMessage = $"Lỗi khi tải dữ liệu: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi không mong muốn: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<HttpRequestMessage> CreateAuthRequest(HttpMethod method, string url)
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        var request = new HttpRequestMessage(method, url);

        if (!string.IsNullOrWhiteSpace(token))
        {
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }

        return request;
    }

    private void ViewProductDetails(int productId)
    {
        NavigationManager.NavigateTo($"/product-details/{productId}");
    }
}