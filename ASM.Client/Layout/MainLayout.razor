@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<style>
    /* Ensure the main content is not overlapped by the fixed navbar */
    .main-content {
        padding-top: 70px; /* Adjust based on your navbar height */
    }

    /* Optional: Add some styling to the navbar */
    .navbar-custom {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
    }

    /* Center the search form in the navbar */
    .navbar-search-container {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        width: 100%;
        max-width: 500px; /* Limit the width of the search input */
        display: flex;
        justify-content: center;
    }

    .navbar-search {
        width: 100%;
        max-width: 400px; /* Adjust the width of the search input */
    }

        .navbar-search .form-control {
            background-color: #fff; /* White background */
            border: 1px solid #ced4da; /* Default Bootstrap border */
            border-radius: 0.25rem 0 0 0.25rem; /* Rounded corners on the left */
        }

            .navbar-search .form-control:focus {
                background-color: #fff;
                border-color: #007bff;
                box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
            }

        .navbar-search .btn {
            background-color: #007bff;
            border-color: #007bff;
            border-radius: 0 0.25rem 0.25rem 0; /* Rounded corners on the right */
        }

            .navbar-search .btn:hover {
                background-color: #0056b3;
                border-color: #0056b3;
            }

    /* Ensure the left and right navbar items don’t overlap the search */
    .navbar-nav-left {
        margin-right: 20px; /* Space between left items and search */
    }

    .navbar-nav-right {
        margin-left: 20px; /* Space between search and right items */
    }
</style>

<!-- Fixed Horizontal Navbar -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top navbar-custom px-4">
    <div class="container-fluid position-relative">
        <!-- Brand and Left-aligned items -->
        <div class="d-flex align-items-center">
            <a class="navbar-brand" href="/">NomNomNow</a>
            <!-- Toggler for mobile view -->
            <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu" aria-controls="navbarNav" aria-expanded="@(!collapseNavMenu)" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>

        <!-- Navbar Items -->
        <div class="collapse navbar-collapse" id="navbarNav" style="@(collapseNavMenu ? "display: none;" : "")">
            <!-- Left-aligned items -->
            <ul class="navbar-nav navbar-nav-left">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">Trang chủ</NavLink>
                </li>

                @if (isLoggedIn)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/cart">Giỏ hàng</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/orders">Đơn hàng</NavLink>
                    </li>
                    @if (userRole == "Admin")
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/admin">Quản trị</NavLink>
                        </li>
                    }
                }
            </ul>

            <!-- Search Input (Centered) -->
            <div class="navbar-search-container">
                <form class="d-flex navbar-search" @onsubmit="HandleSearch">
                    <input class="form-control me-0" required type="search" placeholder="Tìm kiếm sản phẩm..." aria-label="Search" @bind="searchQuery" />
                    <button class="btn btn-primary" type="submit">Tìm</button>
                </form>
            </div>

            <!-- Right-aligned items -->
            <ul class="navbar-nav navbar-nav-right ms-auto">
                @if (isLoggedIn)
                {
                    <li class="nav-item">
                        <span class="nav-link text-light">Xin chào, @userEmail</span>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-warning" href="#" @onclick="Logout">Đăng xuất</a>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/login">Đăng nhập</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/register">Đăng ký</NavLink>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

<!-- Main Content -->
<div class="main-content">
    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool isLoggedIn = false;
    private string? userId;
    private string? userEmail;
    private string? userRole;
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the JWT token from local storage
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

        isLoggedIn = !string.IsNullOrEmpty(token);

        if (isLoggedIn && !string.IsNullOrEmpty(token))
        {
            try
            {
                // Parse the JWT token to extract claims
                var handler = new JwtSecurityTokenHandler();
                var jwtToken = handler.ReadJwtToken(token);

                // Extract user details from the token claims
                userId = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
                userEmail = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
                userRole = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
            }
            catch (Exception ex)
            {
                // Handle token parsing errors (e.g., invalid token)
                Console.WriteLine($"Error parsing JWT token: {ex.Message}");
                await Logout();  // Log out the user if the token is invalid
            }
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        // Remove token from localStorage
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        
        // Clear local state
        isLoggedIn = false;
        userId = null;
        userEmail = null;
        userRole = null;
        
        // Redirect to home with force reload
        NavigationManager.NavigateTo("/");
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            NavigationManager.NavigateTo($"/search?query={Uri.EscapeDataString(searchQuery)}");
        }
    }
}